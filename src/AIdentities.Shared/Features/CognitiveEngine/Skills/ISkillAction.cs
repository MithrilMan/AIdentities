using AIdentities.Shared.Features.CognitiveEngine.Mission;
using AIdentities.Shared.Features.CognitiveEngine.Thoughts;

namespace AIdentities.Shared.Features.CognitiveEngine.Skills;

public interface ISkillAction
{
   /// <summary>
   /// The unique identifier of the skill action instance.
   /// </summary>
   public Guid Id { get; }

   /// <summary>
   /// The name of the skill action.
   /// </summary>
   string Name { get; }

   /// <summary>
   /// The activation context of the skill action.
   /// This is used to instruct the AI when to activate the skill action.
   /// </summary>
   string ActivationContext { get; }

   /// <summary>
   /// A description of the skill action response.
   /// It's useful to instruct the AI agent about how to interpret the skill action response.
   /// </summary>
   string ReturnDescription { get; }

   /// <summary>
   /// A natural language prompt that shows some examples of the skill action call.
   /// e.g.
   /// UserRequest: I don't like the color of the background, I'd like it to be blue
   /// JSON: { args: [{ "WhatToChange": "Change the background color to blue" }] }
   /// 
   /// UserRequest: I'd like a colorful theme for the application
   /// JSON: { args: [{ "WhatToChange": "Change the background color to blue" }] }
   /// </summary>
   string Examples { get; }

   IEnumerable<SkillArgumentDefinition> Arguments { get; }

   /// <summary>
   /// Execute the skill action giving a natural language input.
   /// The natural language prompt can be generated by many sources, including user, other skills, thoughts, etc.
   /// While the skill is executing, it can stream back to the caller its thoughts.
   /// </summary>
   /// <param name="prompt">The natural language input generated by the AI agent.</param>
   /// <param name="cognitiveContext">The cognitive context of the AIdentity.</param>
   /// <param name="missionContext">The optional mission context of the AIdentity.</param>
   /// <param name="cancellationToken">A cancellation token.</param>
   /// <returns>A natural language stream of responses about the action outcome.</returns>
   IAsyncEnumerable<Thought> ExecuteAsync(Prompt prompt, CognitiveContext cognitiveContext, MissionContext? missionContext, CancellationToken cancellationToken = default);
}
