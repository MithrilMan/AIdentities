using AIdentities.Shared.Features.CognitiveEngine.Mission;
using AIdentities.Shared.Features.CognitiveEngine.Prompts;
using AIdentities.Shared.Features.CognitiveEngine.Thoughts;

namespace AIdentities.Shared.Features.CognitiveEngine;

/// <summary>
/// Represents the cognitive engine of an AIdentity (it's brain basically).
/// There can be different implementations of this interface that differs on how
/// each one handles the prompts and coordinate a common goal with others.
/// An AIdentity can clone itself and each clone will have its own cognitive engine.
/// A cognitive engine has to be considered like the brain of an instance of an AIdentity.
/// </summary>
public interface ICognitiveEngine
{
   /// <summary>
   /// The AIdentity that owns this cognitive engine.
   /// Or in other words, the AIdentity that this cognitive engine is the brain of.
   /// </summary>
   AIdentity AIdentity { get; }

   /// <summary>
   /// The context of the cognitive engine.
   /// Think of it like the working memory of the cognitive engine that can be shared among skills
   /// executed by this AIdentity in a specific context.
   /// </summary>
   CognitiveContext Context { get; }

   /// <summary>
   /// Handle a prompt, returning a stream of thoguhts.
   /// </summary>
   /// <param name="prompt">The prompt to handle.</param>
   /// <param name="missionContext">
   /// An optional mission context.
   /// If mission context is provided, the cognitive engine will try to use the mission context to decide how to proceed and
   /// when / if delegate actions to other AIdentities.
   /// </param>
   /// <param name="cancellationToken">The cancellation token.</param>
   /// <returns>A stream of thoughts generated during the prompt handling.</returns>
   IAsyncEnumerable<Thought> HandlePromptAsync(Prompt prompt, IMissionContext? missionContext, CancellationToken cancellationToken);

   /// <summary>
   /// Executes a specific skill.
   /// If no skillExecutionContext is provided, the skill will be executed, a new skill execution context will be created but no result
   /// can be returned except by the thoughts generated by the skill.
   /// To be able to fetch the result of the skill execution, a skill execution context must be provided.
   /// </summary>
   /// <param name="skill">The skill to execute.</param>
   /// <param name="prompt">The prompt that triggered the skill execution or that contains the skill parameters.</param>
   /// <param name="skillExecutionContext">A skill execution context to pass parameters and have result back.</param>
   /// <param name="cancellationToken">The cancellation token to cancel the skill execution.</param>
   /// <returns></returns>
   IAsyncEnumerable<Thought> ExecuteSkill(ISkill skill, Prompt prompt, SkillExecutionContext? skillExecutionContext, CancellationToken cancellationToken);
}
