@inherits AppPage<CognitiveChat>

<PluginResource TPlugin="PluginEntry" ResourceType="PluginResourceType.EmbeddedStyle" />

<MudGrid Class="flex-grow-1" Spacing="1" Justify="Justify.SpaceBetween">
   <MudItem xs="9" Class="mud-height-full d-flex flex-column gap-1">
      <MudPaper>
         <MudToolBar Dense="true" Class="px-2" DisableGutters="true">
            @if (_state.NoConversation == false)
            {
               <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" Size="Size.Medium" Color="Color.Secondary"
                              Variant="Variant.Filled" Class="mr-2" OnClick="_state.CloseConversation" />
            }
            <MudText Class="flex-1 text-ellipsis" Typo="Typo.h6">@GetConversationTitle()</MudText>
            <MudSpacer />

            <MudToggleIconButton Variant="Variant.Text" Title="Moderator Mode is disabled" Disabled="_state.NoConversation"
            @bind-Toggled="_state.IsModeratorModeEnabled"
            @bind-Toggled:after="@OnIsModeratorModeEnabledChanged"
                                 ToggledIcon="@Icons.Material.Filled.Gavel" ToggledColor="Color.Tertiary"
                                 ToggledTitle="Moderator Mode is enabled" ToggledSize="Size.Large"
                                 Icon="@Icons.Material.Filled.Gavel" />

            <MudToggleIconButton Variant="Variant.Text" Title="Click to be able to add a participant" Disabled="_state.NoConversation"
            @bind-Toggled="_showAddAIdentityDialog"
                                 ToggledIcon="@Icons.Material.Filled.PersonAdd" ToggledColor="Color.Tertiary"
                                 ToggledTitle="You can add a participant" ToggledSize="Size.Large"
                                 Icon="@Icons.Material.Filled.PersonAdd" />
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
               <MudMenuItem OnClick="ExportConversation" Icon="@IconsEx.EXPORT" Disabled="_state.NoConversation">Export</MudMenuItem>
               <MudMenuItem OnClick="ClearConversation" Icon="@Icons.Material.Filled.Clear" Disabled="_state.NoConversation">Clear conversation</MudMenuItem>
            </MudMenu>
         </MudToolBar>
         @if (_state.NoConversation == false)
         {
            <MudStack Row="true" Class="">
               <div class="d-flex flex-row animate__animated animate__backInDown animate__jello">
                  <div class="cursor-pointer" @onclick="@(() => _areChatKeeperThoughtsVisible = !_areChatKeeperThoughtsVisible)">
                     <MudTooltip Text="@CognitiveChatMission.MissionRunner?.AIdentity.Name" Placement="Placement.Bottom" Arrow="true">
                        <MudAvatar Size="Size.Medium" Class="@ChatKeeperClasses">
                           <MudImage Src="@(PluginResourcePath.GetContentPath<PluginEntry>("chat-keeper.jpeg"))" />
                        </MudAvatar>
                     </MudTooltip>

                     <MudPopover AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Open="@_areChatKeeperThoughtsVisible">
                        <MudPaper Class="pa-2 mud-theme-secondary" Elevation="10">
                           @if (_state.ChatKeeperThoughts.Count > 0)
                           {
                              <MudListExtended Virtualize=" true" T="Thought" MaxItems="5" Dense="true" DisableGutters="true"
                                               ItemCollection="(((IEnumerable<Thought>)_state.ChatKeeperThoughts).Reverse().ToList())" ToStringFunc="@(f => f.Content)" />
                           }
                           else
                           {
                              <MudText Typo="Typo.body2">No thoughts yet.</MudText>
                           }
                        </MudPaper>
                     </MudPopover>
                  </div>

                  @foreach (var aid in _state.ParticipatingAIdentities)
                  {
                     @if (_state.IsModeratorModeEnabled)
                     {
                        <div class="cursor-pointer" @onclick="@(() => SetNextTalker(aid))">
                           <MudMenu AnchorOrigin="Origin.BottomLeft" Color="Color.Tertiary" Size="Size.Large" ActivationEvent="MouseEvent.MouseOver">
                              <ActivatorContent>
                                 <MudAvatar Size="Size.Medium" Class="@GetParticipantClass(aid)"><MudImage Src="@aid.GetImageUri()" /></MudAvatar>
                              </ActivatorContent>
                              <ChildContent>
                                 <MudText Class="mud-theme-secondary" Typo="Typo.subtitle1" Align="Align.Center">@aid.Name</MudText>
                                 <MudDivider />
                                 <MudMenuItem OnClick="() => ReplyToSelectedMessage(aid)" Disabled="_state.SelectedMessage is null">Reply to selected message</MudMenuItem>
                                 <MudMenuItem OnClick="() => ReplyToLastMessage(aid)">Reply to last message</MudMenuItem>
                              </ChildContent>
                           </MudMenu>
                        </div>
                     }
                     else
                     {
                        <MudTooltip Text="@aid.Name" Placement="Placement.Bottom" Arrow="true">
                           <MudAvatar Size="Size.Medium"><MudImage Src="@aid.GetImageUri()" /></MudAvatar>
                        </MudTooltip>
                     }
                  }
               </div>
               @if (_showAddAIdentityDialog)
               {
                  <AIdentitySelector AutoFocus="true" Class="ma-0" Placeholder="Select an AIdentity to invite." Style="border-radius:0"
                                     Margin="Margin.Dense" Variant="Variant.Text" Filter="(aid => !_state.ParticipatingAIdentities.Contains(aid))"
                                     SelectedAIdentityChanged="AddParticipant" />
               }
            </MudStack>
         }
      </MudPaper>

      <div class="d-flex flex-column flex-grow-1 overflow-y-auto" id="@LIST_ID">
         <MudPaper Class="d-flex flex-column flex-grow-1 pa-2 gap-1" Outlined="true">
            <MudList Class="list d-flex flex-column flex-grow-1" DisablePadding="true" DisableGutters="true" Dense="true"
                     Clickable="true" SelectedItemChanged="OnSelectedMessageChanged"
                     SelectedValue="_state.SelectedMessage">
               <MudSpacer />
               @{
                  Guid? lastAIdentity = null;
                  var lastMessageWasGenerated = false;
               }
               @foreach (var message in GetMessagesToDisplay())
               {
                  var newMessageGroup = lastMessageWasGenerated != message.IsAIGenerated || (message.IsAIGenerated && lastAIdentity != message.AuthorId);
                  lastAIdentity = message.AuthorId;
                  lastMessageWasGenerated = message.IsAIGenerated;
                  <MudListItem Class="flex-shrink-0" @key="message" Value="message">
                     <GenerativeChatMessage NewGroup="@newMessageGroup" Message="message" IsSelected="@(_state.SelectedMessage == message)"
                                            OnDelete="OnDeleteMessage" OnPlayAudio="OnPlayAudio" OnStopAudio="OnStopAudio" />
                  </MudListItem>
               }
               @if (_state.IsWaitingReply && _streamingMessages.Count == 0)
               {
                  <MudStack Row="true" Class="mud-width-full">
                     <MudItem xs="11">
                        <MudCard Class="flex-grow-1" Elevation="0">
                           <MudCardHeader Class="py-1 px-0">
                              <CardHeaderAvatar>
                                 <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Pulse" Height="40px" Width="40px" />
                              </CardHeaderAvatar>
                              <CardHeaderContent>
                                 <MudSkeleton Animation="Animation.Wave" Height="40px" SkeletonType="SkeletonType.Rectangle" />
                              </CardHeaderContent>
                           </MudCardHeader>
                        </MudCard>
                     </MudItem>
                     <MudItem xs="1"></MudItem>
                  </MudStack>
               }
            </MudList>
         </MudPaper>
      </div>

      <MudPaper Class="flex-shrink-0 d-flex flex-row pa-0 gap-1 align-center px-1" Elevation="3">
         @if (_state.Connector is null)
         {
            <MudAlert Severity="MudBlazor.Severity.Error" Class="mud-width-full"
                      ContentAlignment="HorizontalAlignment.Center">No conversational connector avaiable. Update your Chat Settings and chose an enabled connector.</MudAlert>
         }
         else
         {
            @if (_state.HasMessageGenerationFailed)
            {
               <MudButton StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Error" ButtonType="ButtonType.Button" Size="Size.Large" Variant="Variant.Filled"
                          OnClick="Resend" Disabled="@(_state.IsWaitingReply)">Resend</MudButton>
            }
            <div class="pa-0 d-flex flex-column flex-1 ma-0 overflow-y-auto" style="max-height:300px">
               <MudTextFieldExtended Variant="Variant.Outlined" Lines="2" @ref="_messageTextField"
                                     Placeholder="Enter your message..." Immediate="true" Margin="Margin.Dense"
                                     Class="pa-0 ma-0" AutoSize="true" AutoFocus="true"
                                     OnKeyDown="OnKeyDown" Disabled="@(_state.NoConversation)"
               @bind-Value="_state.Message" />
            </div>
            @if (_state.IsWaitingReply)
            {
               <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" ButtonType="ButtonType.Button" Size="Size.Medium"
                              Title="Stop generation"
                              OnClick="StopMessageGeneration" />
            }
            else
            {
               <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Secondary" ButtonType="ButtonType.Button" Size="Size.Medium"
                              OnClick="SendMessageAsync" Disabled="@(!_state.CanSendMessage)" />
            }
         }
      </MudPaper>
   </MudItem>

   <MudItem xs="3" Class="mud-height-full">
      <MudPaper Class="mud-height-full">
         <ConversationList Class="mud-height-full" Conversation="_state.CurrentConversation" ConversationChanged="OnConversationChanged" />
      </MudPaper>
   </MudItem>
</MudGrid>

@code {
   bool _showAddAIdentityDialog = false;
   bool _areChatKeeperThoughtsVisible = false;
   void ToggleOpenAddAIdentityDialog() => _showAddAIdentityDialog = !_showAddAIdentityDialog;

   string ChatKeeperClasses => CssBuilder.Empty()
      .AddClass("animate__animated animate__tada animate__infinite", _state.IsChatKeeperThinking)
      .Build();

   string GetParticipantClass(AIdentity aIdentity) => CssBuilder.Empty()
      .AddClass("animate__animated animate__swing animate__slower animate__infinite", CognitiveChatMission.Context.NextTalker == aIdentity)
      .Build();

   string GetConversationTitle()
   {
      if (_state.NoConversation)
      {
         return "Select a conversation";
      }
      return _state.CurrentConversation.Title;
   }

   ICollection<AIdentity> GetAvailableAIdentities()
   {
      if (_state.NoConversation) return Array.Empty<AIdentity>();

      return AIdentityProvider.All().Where(a => !_state.CurrentConversation.AIdentityIds.Contains(a.Id)).ToList();
   }

   void OnSelectedMessageChanged(MudListItem item) => _state.SelectedMessage = item?.Value as ConversationMessage;
}

