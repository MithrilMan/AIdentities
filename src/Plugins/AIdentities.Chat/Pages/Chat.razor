@inherits AppPage<Chat>

<HeadContent>
   <link href="_content/AIdentities.Chat/AIdentities.Chat.bundle.scp.css" rel="stylesheet">
</HeadContent>

<MudGrid Class="flex-grow-1" Spacing="1" Justify="Justify.SpaceBetween">
   <MudItem xs="9" Class="mud-height-full d-flex flex-column gap-1">
      <MudStack Row="true" AlignItems="AlignItems.Center" Class="mud-elevation-3 px-1">
         @if (_state.SelectedConversation is not null)
         {
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" Size="Size.Medium" Color="Color.Secondary" Variant="Variant.Filled" OnClick="CloseConversation" />
         }
         <MudText Class="flex-1 text-ellipsis" Typo="Typo.h6">@GetConversationTitle()</MudText>
         <MudTextField T="string" Placeholder="Search Message..." @bind-Value="_state.MessageSearchText" @bind-Value:after="@ApplyFilter"
                       Variant="Variant.Filled" DebounceInterval="250" Class="flex-1 ma-0" Margin="Margin.Dense"
                       Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true"
                       AdornmentColor="Color.Secondary" Disabled="@(_state.SelectedConversation == null)" />
      </MudStack>

      <div class="d-flex flex-column flex-grow-1 overflow-y-auto" id="@LIST_ID">
         <MudPaper Class="d-flex flex-column flex-grow-1 pa-2 gap-1" Outlined="true">
            <MudList Class="list d-flex flex-column flex-grow-1" DisablePadding="true" DisableGutters="true" Dense="true"
                     Clickable="true" SelectedItemChanged="OnSelectedMessageChanged">
               <MudSpacer />
               @foreach (var message in _state.Messages.Items)
               {
                  <MudListItem Class="flex-shrink-0" @key="message" Value="message">
                     <Message ChatMessage="message" IsSelected="@(_state.SelectedMessage == message)" OnDelete="OnDeleteMessage" />
                  </MudListItem>
               }
               @if (_state.IsWaitingReply)
               {
                  if (_state.StreamedResponse is { Message.Length: > 0 })
                  {
                     <MudListItem Class="flex-shrink-0" Value="_state.StreamedResponse">
                        <Message ChatMessage="_state.StreamedResponse" IsSelected="@(_state.SelectedMessage == _state.StreamedResponse)" OnDelete="OnDeleteMessage" />
                     </MudListItem>
                  }
                  else
                  {
                     <MudStack Row="true" Class="mud-width-full">
                        <MudItem xs="11">
                           <MudCard Class="flex-grow-1" Elevation="0">
                              <MudCardHeader Class="py-1 px-0">
                                 <CardHeaderAvatar>
                                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Pulse" Height="40px" Width="40px" />
                                 </CardHeaderAvatar>
                                 <CardHeaderContent>
                                    <MudSkeleton Animation="Animation.Wave" Height="40px" SkeletonType="SkeletonType.Rectangle" />
                                 </CardHeaderContent>
                              </MudCardHeader>
                           </MudCard>
                        </MudItem>
                        <MudItem xs="1"></MudItem>
                     </MudStack>
                  }
               }
            </MudList>
         </MudPaper>
      </div>

      <MudPaper Class="flex-shrink-0 d-flex flex-row pa-0 gap-1 align-center px-1" Elevation="3">
         @if (_state.Connector is null)
         {
            <MudAlert Severity="MudBlazor.Severity.Error" Class="mud-width-full"
                   ContentAlignment="HorizontalAlignment.Center">No conversational connector avaiable. Update your Chat Settings and chose an enabled connector.</MudAlert>
         }
         else
         {
            @if (_state.HasMessageGenerationFailed)
            {
                     <MudButton StartIcon="@Icons.Material.Filled.Refresh" Color="Color.Error" ButtonType="ButtonType.Button" Size="Size.Large" Variant="Variant.Filled"
                    OnClick="Resend" Disabled="@(_state.IsWaitingReply)">Resend</MudButton>
            }
            <div class="pa-0 d-flex flex-1 ma-0 overflow-y-auto" style="max-height:300px">
               <MudTextFieldExtended Variant="Variant.Outlined" Lines="2" @ref="_messageTextField"
                                  Placeholder="Enter your message..." Immediate="true" Margin="Margin.Dense"
                                  Class="pa-0 ma-0" AutoSize="true" AutoFocus="true"
                                  OnKeyDown="OnKeyDown" Disabled="@(_state.SelectedConversation == null)"
                                  @bind-Value="_state.Message" />
            </div>
            @if (_state.IsWaitingReply)
            {
               <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" ButtonType="ButtonType.Button" Size="Size.Medium"
                        Title="Stop generation"
                        OnClick="StopMessageGeneration" />
            }
            else
            {
               <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Secondary" ButtonType="ButtonType.Button" Size="Size.Medium"
                        OnClick="SendMessageAsync" Disabled="@(!_state.CanSendMessage)" />
            }
         }
      </MudPaper>
   </MudItem>

   <MudItem xs="3" Class="mud-height-full">
      <MudPaper Class="mud-height-full">
         <ConversationList Class="mud-height-full" @bind-Conversation="_state.SelectedConversation" @bind-Conversation:after="OnConversationChanged" />
      </MudPaper>
   </MudItem>
</MudGrid>

@code {
   string GetConversationTitle()
   {
      if (_state.SelectedConversation == null)
      {
         return "Select a conversation";
      }
      return _state.SelectedConversation.Title;
   }

   void OnSelectedMessageChanged(MudListItem item) => _state.SelectedMessage = item.Value as ChatMessage;
}
