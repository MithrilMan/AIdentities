<Project>
   <!--<Target Name="RunPluginBuilderTask" AfterTargets="Build">
      <PluginBuilderTask
         AssemblyName="$(AssemblyName)"
         ProjectFile="$(MSBuildProjectFullPath)"
         IntermediateOutputPath="$(IntermediateOutputPath)"
         />
   </Target>-->

   <!--<Target Name="BundleBlazorAssets" AfterTargets="Build">
      <BundleBlazorAssets AssemblyName="$(AssemblyName)" TargetFolder="$(OutputPath)" />
   </Target>-->

   <!--<Target Name="GetTasksOutputDlls" BeforeTargets="CoreCompile">
      <MSBuild Projects="..\Microsoft.AspNetCore.Components.WebAssembly.MultipartBundle.Tasks\Microsoft.AspNetCore.Components.WebAssembly.MultipartBundle.Tasks.csproj" Targets="Publish;PublishItemsOutputGroup" Properties="Configuration=Release">
         <Output TaskParameter="TargetOutputs" ItemName="_TasksProjectOutputs" />
      </MSBuild>
      <ItemGroup>
         <Content Include="@(_TasksProjectOutputs)" Condition="'%(_TasksProjectOutputs.Extension)' == '.dll'" Pack="true" PackagePath="tasks\%(_TasksProjectOutputs.TargetPath)" KeepMetadata="Pack;PackagePath" />
      </ItemGroup>
   </Target>-->


   <!-- 
      When plugins are referenced by AIdentities.UI, some files are overwritten by the last plugin referenced.
      This is fine becaue the files should be only the aid-manifest.json files.
      `electronize start` used to start the app hosted in Electron, fails on publish because of this collision
      so we remove the files from the publish process.
      Since the default value of PublishReadyToRun for Electron.NET is true, we only remove the files if we 
      found that value set to true.
      We shouldn't use that flag to true when packaging our plugins.
      -->
   <ItemGroup Condition="'$(PublishReadyToRun)' == 'True' Or '$(ExcludeAdiManifest)' == 'True'">
      <Content Remove="aid-manifest.json"/>
      <None Include="aid-manifest.json">
         <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
         <CopyToPublishDirectory>Never</CopyToPublishDirectory>
      </None>
   </ItemGroup>

   <!--We ensure we have a proper plugin builder package in our local NuGet package source set in the Directory.Build.props file-->
   <Target Name="CheckFullPluginBuilderPackagePath" BeforeTargets="PrepareForBuild" Condition="'$(AddPluginBuilder)' == 'True'">
      <Message Importance="high" Text="CheckFullPluginBuilderPackagePath"/>
      <Message Condition="!Exists('$(FullPluginBuilderPackagePath)')"
               Importance="High"
               Text="The plugin builder package '$(FullPluginBuilderPackagePath)' does not exist. Trying to compile the AIdentities.PluginBuilder..." />
      <Exec Condition="!Exists('$(FullPluginBuilderPackagePath)')"
            Command="dotnet build &quot;$(MSBuildThisFileDirectory)/../AIdentities.PluginBuilder/AIdentities.PluginBuilder.csproj&quot;" />
   </Target>
</Project>
