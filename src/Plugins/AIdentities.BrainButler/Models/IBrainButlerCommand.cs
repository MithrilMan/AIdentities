using AIdentities.BrainButler.Commands;

namespace AIdentities.BrainButler.Models;

public interface IBrainButlerCommand
{
   /// <summary>
   /// The name of the command.
   /// </summary>
   string Name { get; }

   /// <summary>
   /// The activation context of the command.
   /// This is used to instruct the AI when to activate the command.
   /// </summary>
   string ActivationContext { get; }

   /// <summary>
   /// A description of the command response.
   /// It's useful to instruct the AI agent about how to interpret the command response.
   /// </summary>
   string ReturnDescription { get; }

   /// <summary>
   /// A natural language prompt that shows some examples of the command call.
   /// e.g.
   /// UserRequest: I don't like the color of the background, I'd like it to be blue
   /// JSON: { args: [{ "WhatToChange": "Change the background color to blue" }] }
   /// 
   /// UserRequest: I'd like a colorful theme for the application
   /// JSON: { args: [{ "WhatToChange": "Change the background color to blue" }] }
   /// </summary>
   string Examples { get; }

   IEnumerable<CommandArgumentDefinition> Arguments { get; }

   /// <summary>
   /// Execute the command giving a natural language input.
   /// The natural language input is generated by the AI agent that examine the user request, find the
   /// proper command to execute, read its argument descriptions and tries to formulate a request to the command.
   /// During its operation a stream of natural language responses is generated.
   /// </summary>
   /// <param name="userPrompt">The raw user request. Can be used as a fallback mechanism depending on the command.</param>
   /// <param name="inputPrompt">Natural language input.</param>
   /// <param name="cancellationToken">A cancellation token.</param>
   /// <returns>A natural language stream of responses about the action outcome.</returns>
   IAsyncEnumerable<CommandExecutionStreamedFragment> ExecuteAsync(string userPrompt, string? inputPrompt, CancellationToken cancellationToken = default);
}
